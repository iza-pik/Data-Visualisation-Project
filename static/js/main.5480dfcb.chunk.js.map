{"version":3,"sources":["components/Header/index.tsx","utils/stockParser.ts","constants/index.ts","utils/getStockColour.ts","App.tsx","reportWebVitals.js","index.tsx"],"names":["HeaderWrapper","styled","header","valueOptions","Header","onChange","value","map","currValue","htmlFor","checked","id","type","stockParser","stockData","ticker","d","Date","date","stocks","AAPL","colour","AMZN","FB","GOOG","MSFT","TSLA","getStockColour","AppWrapper","div","tickers","Object","keys","App","useState","setValue","options","chart","zoomType","title","text","subtitle","tooltip","backgroundColor","borderColor","credits","enabled","xAxis","categories","labels","format","series","name","data","gapSize","valueDecimals","fillOpacity","fillColor","linearGradient","x1","y1","x2","y2","stops","lineWidth","threshold","event","target","highcharts","Highcharts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRASaA,EAAgBC,IAAOC,OAAV,gRAapBC,EAAe,CAAC,OAAQ,OAAQ,MAAO,SAwB9BC,EAtBmB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC7C,OACE,eAACN,EAAD,WACE,yDACA,+BACGG,EAAaI,KAAI,SAACC,GAAD,OAChB,wBAAOC,QAASD,EAAhB,UACE,uBACEE,QAASF,IAAcF,EACvBK,GAAIH,EACJH,SAAUA,EACVO,KAAK,QACLN,MAAOE,IAERA,IAR6BA,Y,OC5B7BK,EAAc,SACzBC,EACAC,GAFyB,IAGzBT,EAHyB,uDAGC,OAHD,OAKxBQ,EAAUC,IAAW,IAAIR,KAAI,SAACS,GAAD,MAAmB,CAC/C,IAAIC,KAAKD,EAAEE,MACXF,EAAEV,QCYOa,EAAS,CACpBC,KAAM,CAAEC,OAAQ,iBAChBC,KAAM,CAAED,OAAQ,cAChBE,GAAI,CAAEF,OAAQ,iBACdG,KAAM,CAAEH,OAAQ,gBAChBI,KAAM,CAAEJ,OAAQ,iBAChBK,KAAM,CAAEL,OAAQ,iBCvBLM,EAAiB,SAACZ,GAAD,aAC5B,UAAAI,EAAOJ,UAAP,eAAgBM,SAHW,iBCOhBO,EAAa3B,IAAO4B,IAAV,gGAMjBC,EAAUC,OAAOC,KAAKlB,GAiEbmB,EA/DW,WAAO,IAAD,EACJC,mBAA2B,QADvB,mBACvB5B,EADuB,KAChB6B,EADgB,KAQxBC,EAAU,CACdC,MAAO,CACLC,SAAU,KAEZC,MAAO,CACLC,KAAM,kCAERC,SAAU,CACRD,KAAM,oFAERE,QAAS,CACPC,gBAAiB,4BACjBC,YAAa,qBAEfC,QAAS,CACPC,SAAS,GAEXC,MAAO,CACLC,WAAY,WACZC,OAAQ,CAAEC,OAAQ,sBAEpBC,OAAQrB,EAAQvB,KAAI,SAACQ,GAAD,MAAa,CAC/BqC,KAAMrC,EACNH,KAAM,OACNyC,KAAMxC,EAAYC,EAAWC,EAAQT,GACrCgD,QAAS,EACTZ,QAAS,CACPa,cAAe,GAEjBC,YAAa,IACbC,UAAW,CACTC,eAAgB,CACdC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,GAENC,MAAO,CACL,CAAC,EAAD,cAAWpC,EAAeZ,GAA1B,MACA,CAAC,EAAD,eAAYY,EAAeZ,GAA3B,aAGJiD,UAAW,IACXC,UAAW,UAIf,OACE,eAACrC,EAAD,WACE,cAAC,EAAD,CAAQtB,MAAOA,EAAOD,SAvDA,SACxB6D,GAEA/B,EAAS+B,EAAMC,OAAOxD,OAqDpB,cAAC,IAAD,CAAiByD,WAAYC,IAAYjC,QAASA,QC/DzCkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.5480dfcb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { iStockInfo } from \"../../constants\";\r\n\r\nexport interface iHeader {\r\n  value: keyof iStockInfo;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport const HeaderWrapper = styled.header`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #282c34;\r\n  min-height: 10vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: calc(10px + 2vmin);\r\n  color: white;\r\n`;\r\n\r\nconst valueOptions = [\"open\", \"high\", \"low\", \"close\"] as (keyof iStockInfo)[];\r\n\r\nconst Header: React.FC<iHeader> = ({ onChange, value }) => {\r\n  return (\r\n    <HeaderWrapper>\r\n      <h2>Data visualisation tool</h2>\r\n      <form>\r\n        {valueOptions.map((currValue) => (\r\n          <label htmlFor={currValue} key={currValue}>\r\n            <input\r\n              checked={currValue === value}\r\n              id={currValue}\r\n              onChange={onChange}\r\n              type=\"radio\"\r\n              value={currValue}\r\n            />\r\n            {currValue}\r\n          </label>\r\n        ))}\r\n      </form>\r\n    </HeaderWrapper>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { iStockData, iStockInfo, tickerType } from \"../constants\";\r\n\r\nexport const stockParser = (\r\n  stockData: iStockData,\r\n  ticker: tickerType,\r\n  value: keyof iStockInfo = \"open\"\r\n) =>\r\n  (stockData[ticker] || []).map((d: iStockInfo) => [\r\n    new Date(d.date),\r\n    d[value],\r\n  ]);\r\n","export interface iStockInfo {\r\n  date: string;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  adjClose: number;\r\n  volume: number;\r\n}\r\n\r\nexport interface iStockData {\r\n  AAPL: iStockInfo[];\r\n  AMZN: iStockInfo[];\r\n  FB: iStockInfo[];\r\n  GOOG: iStockInfo[];\r\n  MSFT: iStockInfo[];\r\n  TSLA: iStockInfo[];\r\n}\r\n\r\nexport type tickerType = keyof iStockData;\r\n\r\nexport const stocks = {\r\n  AAPL: { colour: \"124, 181, 236\" },\r\n  AMZN: { colour: \"67, 67, 72\" },\r\n  FB: { colour: \"144, 237, 125\" },\r\n  GOOG: { colour: \"247, 163, 92\" },\r\n  MSFT: { colour: \"128, 133, 233\" },\r\n  TSLA: { colour: \"241, 92, 128\" },\r\n};\r\n","import { tickerType, stocks } from \"../constants\";\r\n\r\nexport const defaultColour = \"200, 100, 150\";\r\n\r\nexport const getStockColour = (ticker: tickerType): string =>\r\n  stocks[ticker]?.colour || defaultColour;\r\n","import React, { useState } from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport Header from \"./components/Header/\";\r\nimport styled from \"styled-components\";\r\nimport stockData from \"./constants/stockData.json\";\r\nimport { getStockColour, stockParser } from \"./utils\";\r\nimport { iStockInfo, tickerType } from \"./constants\";\r\n\r\nexport const AppWrapper = styled.div`\r\n  text-align: center;\r\n  background-color: teal;\r\n  height: 100vh;\r\n`;\r\n\r\nconst tickers = Object.keys(stockData) as tickerType[];\r\n\r\nconst App: React.FC<{}> = () => {\r\n  const [value, setValue] = useState<keyof iStockInfo>(\"open\");\r\n  const onChangeStockInfo = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ): void => {\r\n    setValue(event.target.id as keyof iStockInfo);\r\n  };\r\n\r\n  const options = {\r\n    chart: {\r\n      zoomType: \"x\",\r\n    },\r\n    title: {\r\n      text: \"Stock prices change since 2010\",\r\n    },\r\n    subtitle: {\r\n      text: \"Click on the stock tickers to visualise and compare each or all of them at once.\",\r\n    },\r\n    tooltip: {\r\n      backgroundColor: \"rgba(169, 222, 183, 0.75)\",\r\n      borderColor: \"rgb(95, 186, 119)\",\r\n    },\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n    xAxis: {\r\n      categories: \"datetime\",\r\n      labels: { format: \"{value: %Y-%m-%d}\" },\r\n    },\r\n    series: tickers.map((ticker) => ({\r\n      name: ticker,\r\n      type: \"area\",\r\n      data: stockParser(stockData, ticker, value as keyof iStockInfo),\r\n      gapSize: 5,\r\n      tooltip: {\r\n        valueDecimals: 2,\r\n      },\r\n      fillOpacity: 0.75,\r\n      fillColor: {\r\n        linearGradient: {\r\n          x1: 0,\r\n          y1: 0,\r\n          x2: 0,\r\n          y2: 1,\r\n        },\r\n        stops: [\r\n          [0, `rgb(${getStockColour(ticker)})`],\r\n          [1, `rgba(${getStockColour(ticker)}, 0.1)`],\r\n        ],\r\n      },\r\n      lineWidth: 0.75,\r\n      threshold: null,\r\n    })),\r\n  };\r\n\r\n  return (\r\n    <AppWrapper>\r\n      <Header value={value} onChange={onChangeStockInfo} />\r\n      <HighchartsReact highcharts={Highcharts} options={options} />\r\n    </AppWrapper>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}